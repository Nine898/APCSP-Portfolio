import re

def get_user_input(prompt):
    """
    Prompt the user for input over multiple lines.
    The user types one or more lines and presses Enter twice when finished.
    All text is concatenated and converted to lowercase for simplified keyword matching.
    """
    print(prompt)
    lines = []
    while True:
        line = input()
        if line.strip() == "":  # Press Enter twice when done.
            break
        lines.append(line)
    return " ".join(lines).lower()


def check_and_notify_threats(user_message):
    """
    Checks the user's message for violent threats toward others as well as declarations of self-harm.
    
    • If a phrase such as "i will kill", "i am going to bomb", "i will attack", "i will hurt", or "i will eat" is detected,
      the bot prints that the police have been notified.
    • If the user states "i will hurt myself", the bot prints that the suicide helpline has been notified.
    
    Returns a string with one or more notifications (if any).
    """
    notifications = []
    # Check for violent intent toward others.
    pattern_violent = r'\bi (will|am going to) (kill|bomb|attack|hurt|eat)\b'
    if re.search(pattern_violent, user_message):
        notifications.append("Alert: For the safety of others, the police have been notified of your statement.")
        
    # Check for self-harm declarations.
    pattern_selfharm = r'\bi (will|am going to) hurt myself\b'
    if re.search(pattern_selfharm, user_message):
        notifications.append("Alert: The suicide helpline has been notified of your statement. Please call them immediately.")
        
    return "\n".join(notifications)


def analyze_user_message(user_message, age, gender):
    """
    Processes the user's message and generates a tailored, therapeutic response.
    
    The bot is designed to sound compassionate like a human therapist.
    In addition to handling topics such as sadness, anxiety, and loneliness,
    it now responds to greetings ("hello", "hi", "hey"), feelings of tiredness or being upset,
    and prompts the user to describe their situation in detail.
    """
    responses = []
    
    # Determine life stage based on age.
    category = "adult"
    if age.isdigit():
        age_int = int(age)
        if age_int < 13:
            category = "child"
        elif 13 <= age_int < 20:
            category = "teen"
        elif age_int >= 65:
            category = "senior"
    
    # Define calming activities by category.
    calming_activities = {
        "child": ["drawing or coloring", "listening to soothing music", "playing with a pet"],
        "teen": ["journaling your thoughts", "taking a brisk walk", "listening to relaxing tunes"],
        "adult": ["practicing mindfulness meditation", "doing light exercise", "enjoying a warm herbal tea"],
        "senior": ["reading a comforting book", "gentle stretching", "listening to nature sounds"]
    }
    
    # Handle simple greetings.
    if user_message.strip() in ["hello", "hi", "hey"]:
        responses.append("Hello there! I'm glad you reached out today. How are you feeling at this moment? Please share a bit about what's on your mind.")
    
    # Handle expressions of tiredness.
    if "tired" in user_message:
        responses.append("I sense you're feeling tired. Could you tell me if this is physical exhaustion, emotional fatigue, or perhaps both? Sharing more details might help me support you better.")
    
    # Handle expressions of being upset.
    if "upset" in user_message:
        responses.append("It sounds like you're feeling upset. Would you be comfortable sharing what might be causing these feelings? The more details you provide, the better I can understand and help.")
    
    # Handle requests for coping strategies.
    if any(keyword in user_message for keyword in ["coping", "cope", "coping strategies", "manage stress", "dealing with stress"]):
        if category == "child":
            responses.append("For someone your age, creative activities like drawing, singing, or playing a game can often be a helpful outlet.")
        elif category == "teen":
            responses.append("Many teenagers find journaling or talking to a friend, as well as listening to good music, to be very effective ways to cope. Have you tried any of these?")
        elif category == "adult":
            responses.append("Many adults find that deep breathing techniques—for example, the 4-7-8 method—or taking a short walk can help manage stress. Would you consider trying one?")
        elif category == "senior":
            responses.append("For seniors, gentle stretching or listening to nature sounds can often bring comfort. Perhaps one of these might help you relax.")
    
    # Address expressions of suicidal ideation or self-harm.
    if any(phrase in user_message for phrase in ["suicidal", "kill myself", "end my life"]):
        responses.append("I understand that you're in deep distress. It might help to immediately speak with a trusted person or mental health professional who can offer guidance.")
    
    # Address sadness.
    if any(keyword in user_message for keyword in ["sad", "depressed", "unhappy", "miserable"]):
        responses.append("It sounds like you're feeling very low. Sometimes engaging in activities like {} can help lift your mood, even if just slightly.".format(", ".join(calming_activities[category])))
        responses.append("Could you please describe what might be making you feel this way? Sharing more details can be an important step toward feeling better.")
    
    # Address anxiety.
    if any(keyword in user_message for keyword in ["anxious", "worried", "panic", "nervous"]):
        responses.append("Anxiety can be very overwhelming. Have you tried grounding techniques such as {}? Sometimes focusing on your breathing or surroundings might provide a moment of calm.".format(", ".join(calming_activities[category])))
        responses.append("What do you think triggers these feelings? Knowing more might help in finding strategies to manage them.")
    
    # Address loneliness.
    if any(keyword in user_message for keyword in ["lonely", "alone", "isolated"]):
        responses.append("Feeling alone can be extremely hard. Even a brief conversation about your day can help ease that isolation. What has been on your mind lately?")
    
    # Address religion or spirituality.
    if "religion" in user_message or any(word in user_message for word in ["faith", "god", "spiritual"]):
        responses.append("Spiritual and religious beliefs can offer a great source of comfort during difficult times.")
        responses.append("Could you share which faith or spiritual practice you identify with? Sometimes traditions or prayer can be very supportive.")
    elif any(word in user_message for word in ["christian", "muslim", "hindu", "buddhist", "jewish"]):
        responses.append("Your faith tradition may offer meaningful practices that bring comfort. Is there a particular custom or prayer that helps you when times are tough?")
    
    # Default case for overly vague messages.
    if not responses:
        responses.append("I'm here to listen and truly care about what you're going through. Could you please describe in more detail what's troubling you? The more specifics you provide, the better I can help.")
    
    return "\n\n".join(responses)


def start_conversation(name, age, gender):
    """
    Runs the conversation loop using the user's details for personalized responses.
    
    Each message is checked for violent or self-harm statements (in which case notifications are simulated)
    and then analyzed, with thoughtful and specific prompts being provided.
    
    The conversation continues until the user types "exit" or "quit".
    """
    print(f"\nThank you, {name}. You can type 'exit' or 'quit' at any point to end our conversation.\n")
    
    while True:
        user_message = get_user_input("You (press Enter twice when done): ")
        
        if user_message.strip() in ["exit", "quit"]:
            print(f"\nThank you for spending time with me, {name}. Remember, you matter greatly, and I'm here whenever you need to talk.")
            break
        
        # Check for violent or self-harm threats and display simulated notifications.
        notifications = check_and_notify_threats(user_message)
        if notifications:
            print("\n" + notifications + "\n")
        
        # Generate and display a tailored response.
        response = analyze_user_message(user_message, age, gender)
        print("\n" + response + "\n")


def sad_chatbot():
    """
    Greets the user, collects their full name, age, and gender, then initiates a personalized conversation.
    
    The bot is designed to be as empathetic and detailed as a caring therapist, guiding the user to share specifics of their issue.
    """
    print("Hello, I'm here to listen and support you as best as I can.")
    
    name = input("\nWhat is your full name (first and last)? ")
    age = input("\nMay I ask how old you are? ")
    gender = input("\nCould you also share your gender or preferred identification? ")
    
    print(f"\nThank you for providing that information, {name}. I'll do my best to tailor my responses to your needs.")
    start_conversation(name, age, gender)


# Start the chatbot conversation when the script runs.
sad_chatbot()