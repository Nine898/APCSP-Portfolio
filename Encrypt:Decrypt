def caesar_cipher(text, shift, mode):
    result = ''  # Store the final processed text
    for char in text:  # Iterate through each character in the input text
        if 'a' <= char <= 'z':  # Check if the character is a lowercase letter
            start = ord('a')  # Define ASCII starting point for lowercase
        elif 'A' <= char <= 'Z':  # Check if the character is an uppercase letter
            start = ord('A')  # Define ASCII starting point for uppercase
        else:
            result += char  # Add non-letter characters unchanged
            continue  # Skip further processing for non-letter characters

        # Apply Caesar cipher shifting with wrap-around at 'z' or 'Z'
        shifted_char = chr((ord(char) - start + shift) % 26 + start)
        result += shifted_char  # Add the shifted character to the result
    return result  # Return the processed text


def main():
    text = input("Enter the text: ")  # Get the input text from user
    while True:
        try:
            shift = int(input("Enter the shift value (integer): "))  # Get shift value
            break  # Exit loop if input is valid
        except ValueError:
            print("Invalid input. Please enter an integer.")  # Handle invalid input

    while True:
        mode = input("Enter E for encrypt or D for decrypt: ").lower()  # Get mode (E/D)
        if mode in ('e', 'd'):
            break  # Exit loop if valid input
        else:
            print("Invalid mode. Please enter 'E' or 'D'.")  # Handle invalid input
    
    if mode == 'd':
        shift = -shift  # Reverse shift for decryption
    encrypted_text = caesar_cipher(text, shift, mode)  # Process text with cipher
    print("Result:", encrypted_text)  # Print the final result


while True:
    main()  # Run the main function
    c = str(input("Would you like to continue? (Y/N) "))  # Ask if user wants to repeat
    if c == "y".lower():
        continue  # Restart the process if 'Y'
    elif c == "n".lower():
        break  # Exit if 'N'
    else:
        print("Please enter a valid option")  # Handle invalid input
